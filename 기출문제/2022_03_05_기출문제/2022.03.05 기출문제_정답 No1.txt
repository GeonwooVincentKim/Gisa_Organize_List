User Interface 설계 시 오류 메시지, 경고에 관한 지침으로 가장 거리가 먼 것 (No.1 -> 4)
1. 메시지는 이해하기 쉬워야 함
2. 오류로부터 회복을 위한 구체적인 설명이 제공되어야 함
3. 오류로 인해 발생 될 수 있는 부정적인 내용을 적극적으로 사용자들에게 알려야 함
4. 소리, 색 사용 줄이고, Text 로만 전달하도록 함

= 1. 직관성 (Intuitiveness) -> 누구나 쉽게 이해, 쉽게 사용
= 2. 유효성 (Effectiveness) -> 정확, 완벽, 사용자 목표가 달성될 수 있도록 제작
= 3. 학습성 (Learnability) -> 초보, 숙련자 모두 쉽게 배우고 사용
= 4. 유연성 (Flexibility) -> 사용자 Interaction 최대한 포용, 실수 방지할 수 있도록 제작
= 5. 특정 위험, 오류 연상시키는 색깔의 사용은 상식적으로 직관성을 높이는 수단이 됨

다음 중, Agile SW 개발에 대한 설명으로 틀린 것 (No.2 -> 2)
1. 공정과 도구보다 개인과의 상호작용 더 가치 있게 여김
2. 동작하는 SW 보다 포괄적인 문서를 가치 있게 여김
3. 계약 협상보다 고객과의 협력을 가치 있게 여김
4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여김

= 1. 프로젝트 요구사항은 '기능' 중심
= 2. 공정과 도구보다 '개인'과 소통 중요
= 3. '변화' 에 유연하고 신속한 대처
= 4. '고객' 과의 Feedback 중요

SW 설계에서 요구사항 분석에 대한 설명으로 틀린 것 (No.3 -> 3)
1. SW 가 무엇을 해야하는가 추적, 요구사항 명세를 작성하는 작업
2. 사용자 요구 추출, 목표 설정, 어떤 방식으로 해결할 것인지 결정하는 단계
3. SW System 이 사용되는 동안 발견되는 오류를 정리하는 단계
4. SW 개발의 출발점, 실질적인 첫 번째 단계

= 1. 요구 사항 개발 프로세스
= 2. 도출 - 분석 - 명세 - 확인
= 3. 요구사항 검증 단계
  -> 검증 방법 중 '정형 기술 검토 활용' 이 있음
    => 1. Inspection: 전문가, 팀이 검사하여 오류 찾아내는 공식적 검토 방법
    => 2. 동료 검사: 2 ~ 3명이서 Review 의 형태
    => 3. WorkThrough: 오류를 조기에 검출하는데 목적

= 4. SW System 이 사용되는 동안 발견되는 오류를 정리하는 단계 -> Test 단계

자료흐름도 (DFD) 의 각 요소별 표기 형태의 연결이 옳지 않은 것 (No.6 -> 3)
1. Process -> 원
2. Data Flow -> 화살표
3. Data Store -> 삼각형
4. Terminator -> 사각형

= 자료흐름도 4가지 구성 요소
  -> 1. 처리 Process => 원
  -> 2. 자료 흐름 Data Flow => 화살표
  -> 3. 자료 저장소 Data Store => 평행선
  -> 4. 단말 Terminal => 사각형

SW 개발에 이용되는 Model 에 대한 설명 중 거리가 먼 것 (No.7 -> 4)
1. Model 은 개발 대상을 추상화, 기호나 그림 등으로 시각적으로 표현
2. Model 을 통해 SW 에 대한 이해도 향상
3. Model 을 통해 당사자 간 의사소통 향상
4. Model 을 통해 향후 개발 될 System 의 유추는 불가능

= SW 개발 시, Model 은 향후 개발 될 System 을 유추하기 위해서 하는 활동, 주로 System 개발자가 실행

