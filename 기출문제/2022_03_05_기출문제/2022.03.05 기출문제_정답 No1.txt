User Interface 설계 시 오류 메시지, 경고에 관한 지침으로 가장 거리가 먼 것 (No.1 -> 4)
1. 메시지는 이해하기 쉬워야 함
2. 오류로부터 회복을 위한 구체적인 설명이 제공되어야 함
3. 오류로 인해 발생 될 수 있는 부정적인 내용을 적극적으로 사용자들에게 알려야 함
4. 소리, 색 사용 줄이고, Text 로만 전달하도록 함

= 1. 직관성 (Intuitiveness) -> 누구나 쉽게 이해, 쉽게 사용
= 2. 유효성 (Effectiveness) -> 정확, 완벽, 사용자 목표가 달성될 수 있도록 제작
= 3. 학습성 (Learnability) -> 초보, 숙련자 모두 쉽게 배우고 사용
= 4. 유연성 (Flexibility) -> 사용자 Interaction 최대한 포용, 실수 방지할 수 있도록 제작
= 5. 특정 위험, 오류 연상시키는 색깔의 사용은 상식적으로 직관성을 높이는 수단이 됨

다음 중, Agile SW 개발에 대한 설명으로 틀린 것 (No.2 -> 2)
1. 공정과 도구보다 개인과의 상호작용 더 가치 있게 여김
2. 동작하는 SW 보다 포괄적인 문서를 가치 있게 여김
3. 계약 협상보다 고객과의 협력을 가치 있게 여김
4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여김

= 1. 프로젝트 요구사항은 '기능' 중심
= 2. 공정과 도구보다 '개인'과 소통 중요
= 3. '변화' 에 유연하고 신속한 대처
= 4. '고객' 과의 Feedback 중요

SW 설계에서 요구사항 분석에 대한 설명으로 틀린 것 (No.3 -> 3)
1. SW 가 무엇을 해야하는가 추적, 요구사항 명세를 작성하는 작업
2. 사용자 요구 추출, 목표 설정, 어떤 방식으로 해결할 것인지 결정하는 단계
3. SW System 이 사용되는 동안 발견되는 오류를 정리하는 단계
4. SW 개발의 출발점, 실질적인 첫 번째 단계

= 1. 요구 사항 개발 프로세스
= 2. 도출 - 분석 - 명세 - 확인
= 3. 요구사항 검증 단계
  -> 검증 방법 중 '정형 기술 검토 활용' 이 있음
    => 1. Inspection: 전문가, 팀이 검사하여 오류 찾아내는 공식적 검토 방법
    => 2. 동료 검사: 2 ~ 3명이서 Review 의 형태
    => 3. WorkThrough: 오류를 조기에 검출하는데 목적

= 4. SW System 이 사용되는 동안 발견되는 오류를 정리하는 단계 -> Test 단계

자료흐름도 (DFD) 의 각 요소별 표기 형태의 연결이 옳지 않은 것 (No.6 -> 3)
1. Process -> 원
2. Data Flow -> 화살표
3. Data Store -> 삼각형
4. Terminator -> 사각형

= 자료흐름도 4가지 구성 요소
  -> 1. 처리 Process => 원
  -> 2. 자료 흐름 Data Flow => 화살표
  -> 3. 자료 저장소 Data Store => 평행선
  -> 4. 단말 Terminal => 사각형

SW 개발에 이용되는 Model 에 대한 설명 중 거리가 먼 것 (No.7 -> 4)
1. Model 은 개발 대상을 추상화, 기호나 그림 등으로 시각적으로 표현
2. Model 을 통해 SW 에 대한 이해도 향상
3. Model 을 통해 당사자 간 의사소통 향상
4. Model 을 통해 향후 개발 될 System 의 유추는 불가능

= SW 개발 시, Model 은 향후 개발 될 System 을 유추하기 위해서 하는 활동, 주로 System 개발자가 실행

다음의 설명에 해당하는 언어 (No.8 -> 3)
i 객체 지향 System 을 개발할 때 산출물을 명세화, 시각화, 문서화하는데 사용
ii. 개발하는 System 을 이해하기 쉬운 형태로 표현, 분석가, 의뢰인, 설계자가 효율적인 의사소통을 할 수 있게 해줌
iii. 개발 방법론이나 개발 Process 가 아니라 표준화 된 Modeling 언어

1. JAVA
2. C
3. UML
4. Python

= Unified Modeling Language

다음 내용이 설명하는 UI 설계 도구 (No.9 -> 2)
- 1. Design, 사용 방법 설명, 평가 등을 위해 실제 화면과 유사하게 만든 정적인 형태의 모형
- 2. 시각적으로만 구성 요소를 배치하는 것으로 일반적으로 실제로 구현되지는 않음

1. Storyboard
2. Mockup
3. Prototype
4. UseCase

= 1. Storyboard 
  -> 1. Designer 와 개발자가 최종적으로 참고하는 작업지침서
  -> 2. 상단, 우측에 제목, 작성자 등 입력, 좌측에 UI 화면, 우측에 Description 기입

= 2. Prototype -> Wireframe, Storyboard 등에 Interaction 적용, 실제 구현된 것처럼 Test 가능 (동적 형태)
= 3. UseCase -> 사용자 측면 요구사항, 사용자가 원하는 목표를 달성하기 위해 수행할 내용 기술

Agile 기법 중, Scrum 과 관련된 용어에 대한 설명이 틀린 것 (No.10 -> 3)
1. Scrum Master 는 Scrum Process 를 따르고, 팀이 Scrum 효과적 활용, 보장하는 역할
2. Product Backlog 는 Scrum Team 이 해결해야 하는 목록, SW 요구사항 아키텍처 정의 포함
3. Sprint 는 하나의 완성된 최종 결과물을 만들기 위한 주기, 3달 이상의 장기간으로 결정
4. Velocity 는 한 번의 Sprint 에서 한 Team 이 어느 정도의 Product Backlog 감당 가능한지 추정치로 볼 수 있음

= Sprint
  -> 1. 실제 개발을 2 ~ 4주 간 진행하는 과정
  -> 2. Sprint Backlog 에 작성 된 Task 를 대상으로 작업 시간을 측정한 후, 담당 개발자에게 할당
  -> 3. Task 는 할 일, 진행 중, 완료 상태로 구성

LOC 기법, 예측된 총 라인 수가 36000 라인, 개발 참여할 Programmer 6명, 
Programmer 등의 평균 생산성 월간 300 라인일 때, 개발 소요되는 시간 계산한 결과로 가장 옳은 것 (No.12 -> 4)

1. 5개월
2. 10개월
3. 15개월
4. 20개월

= 1. 노력 (M/M) = 원시 코드 라인 수 (LOC) / (1인당 월 평균 생산 코드 라인 수) -> 36000 / 300 = 120m/m
= 2. 개발 기간 = (M/M) / 참여 인원 = 120 (M/M) / 6명 = 20개월
= 3. 개발 소요기간 계산 방법
  -> 총 라인 수 36000 라인 / 월간 평균 생산성 300라인 = 120 => 120 / 참여 Programmer (6) = 20 => 20 개월

GoF (Gangs of Four) 디자인 패턴에서 생성 (Creational) 패턴에 해당되는 것 (No.14 -> 3)
1. Composite
2. Adapter
3. Abstract Factory
4. Observer

= 1. 생성 -> Abstract Factory
= 2. 구조 -> Composite, Adapter
= 3. 행위 -> Observer

= 4. 생성 Pattern -> Abstract Factory, Builder, FactoryMethod, Prototype, Singleton
= 5. 구조 Pattern -> Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
= 6. 행위 Pattern
  -> 1. 책임 연쇄 (Chain of Responsibility), Command, Interpreter, Iterator, Mediator (중재자)
  -> 2. Memento, Observer, State, Strategy, Template Method, Visitor

Architecture 설계 과정이 올바른 순서로 나열된 것 (No.15 -> 1)
가) 설계 목표 설정
나) System Type 결정
다) Style 적용 및 Customize
라) SubSystem 의 기능, Interface 동작 작성
마) Architecture 설계 검토

1. 가 - 나 - 다 - 라 - 마
2. 마 - 가 - 나 - 라 - 다
3. 가 - 마 - 나 - 라 - 다
4. 가 - 나 - 다 - 마 - 라

= SW Architecture 설계 과정 
  -> 설계 목표 설정 - System Type 결정, Architecture Pattern 적용 - SubSystem 구체화 - 검토

사용자 인터페이스를 설계할 경우 고려해야 할 가이드라인과 가장 거리가 먼 것 (No.16 -> 1)
1. 심미성을 사용성보다 우선 설계
2. 효율성을 높이게 설계
3. 발생 오류를 쉽게 수정
4. 사용자에게 Feedback 제공

= 사용자 친화적이게 설계, 사용성 최우선 고려

SW 설계에서 자주 발생하는 문제에 대한 일반적, 반복적인 해결 방법 (No.17 -> 2)
1. 모듈 분해
2. Design Pattern
3. 연관 관계
4. Class 도출

= Design Pattern -> 객체 지향 Programming 설계를 할 때 자주 발생하는 문제들을 피하기 위해 사용되는 Pattern

객체지향 분석기법의 하나, 객체 & 동적 & 기능 모형의 3개 모형을 생성하는 방법 (No.18 -> 2)
1. Wirfs-Block Method
2. Rumbaugh Method
3. Booch Method
4. Jacobson Method
