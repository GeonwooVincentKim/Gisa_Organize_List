객체지향 기법에서 상위 Class 의 Method 와 속성을 하위 Class 가 물려받는 것을 의미하는 것은 (No.4 -> 4)
1. Abstraction
2. Polymorphism
3. Encapsulation
4. Inheritance

= 1. 객체지향의 주요 개념 (원칙)
= 2. 캡슐화 (Encapsulation)
  -> 1. Data 와 Data 를 처리하는 함수를 하나로 묶은 것
  -> 2. 캡슐화된 객체의 세부 내용 은폐, 변경 발생해도 오류 파급효과 적음
  -> 3. 캡슐화된 객체들 재사용 용이
  -> 4. 인터페이스 단순, 객체 간 결합도 낮아짐

= 3. 상속성 (Inheritance)
  -> 1. OOP 에서 이미 정의된 상위 Class (부모 Class) 의 모든 속성, 연산을 하위 Class 가 상속받는 것
  -> 2. 하위 Class 를 상위 Class 로부터 받은 속성과 연산 외에도 새로운 것 첨가 가능
  -> 3. Clas 재사용, SW 재사용을 높이는 중요한 개념

= 4. 속성 + 연산 물려주는 Class -> 상위 Class (Super Class), 상속 받는 Class -> 하위 Class (Sub Class)
= 5. 다형성 (Polymorphism)
  -> 1. 하나의 메시지에 대해 각 객체가 갖고 있는 고유한 방법대로 응답하는 것
  -> 2. 하나의 Class, Method 가 다양한 방식으로 동작 가능한 것
  -> 3. Overloading, Overriding

= 6. 추상화 (Abstraction) -> Data 들의 공통된 성질을 추출해 Super Class 선정

설계 기법 중 하향식 설계 방법, 상향식 설계 방법에 대한 비교 설명으로 가장 옳지 않은 것 (No.5 -> 4)
1. 하향식 설계, 통합 검사 시 Interface 가 이미 정의, 통합 간단
2. 하향식 설계, 레벨 낮은 데이터 구조의 세부 사항, 설계 초기 단계에서 필요
3. 상향식 설계, 최하위 수준에서 각각 모듈들 설계, 모듈 완성되면 이들을 결합하여 검사
4. 상향식 설계, Interface 이미 성립되어 있지 않더라도 기능 추가 쉬움

= 1. 하향식 통합 Test (Top Down Integration Test)
  -> 1. 깊이 우선 통합법, 넓이 우선 통합법 사용
  -> 2. Test 초기부터 사용자에게 System 구조 보여줄 수 있음
  -> 3. 상위 모듈, TC 사용 어려움
  -> 4. 상위 모듈, 하위 모듈 방향, 통합하면서 Test
  -> 5. 절차
    => 1. 주요 제어 모듈, 작성도니 프로그램 사용, 주요 제어 모듈의 종속 모듈들은 Stub 으로 대체
    => 2. 깊이 우선 or 넓이 우선, 통합방식에 따라, 하위 모듈인 스텁들이 한 번에 하나씩 실제 모듈로 교체
    => 3. 모듈 통합, Test 실시
    => 4. 새로운 오류 발생하지 않음을 보증, 회귀 Test 실시

= 2. 상향식 통합 Test (Bottom Up Integration Test)
  -> 1. 하위 모듈, 상위 모듈 방향, 통합하면서 Test
  -> 2. 가장 하위 단계 모듈, 통합 및 Test 수행, Stub 필요 없음
  -> 3. 하나의 주요 제어 모듈, 종속 모듈의 그룹, Cluster 필요
  -> 4. 절차
    => 1. 하위 모듈 Cluster 로 결합
    => 2. 상위 모듈, Data 입출력 확인, 모듈인 Driver 작성
    => 3. 통합된 Cluster 단위로 Test
    => 4. Test 완료, Cluster 는 프로그램 구조의 상위로 이동 및 결합, Driver 는 실제 모듈로 대체
