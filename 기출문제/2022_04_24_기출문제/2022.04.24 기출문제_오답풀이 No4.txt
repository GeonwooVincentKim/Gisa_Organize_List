다음 c언어 프로그램이 실행되었을 때, 실행 결과 (No.63 -> 2)
#include <stdio.h>

struct st {
  int a;
  int c[10];
}

int main (int argc, char *argv[]) {
  int i = 0;
  struct st ob1;
  struct st ob2;
  ob1.a = 0;
  ob2.a = 0;

  for (i = 0; i < 10; i++) {
    ob1.c[i] = i;
    ob2.c[i] = ob1.c[i] + i;
  }

  for (i = 0; i < 10; i = i + 2) {
    ob1.a = ob1.a + ob1.c[i];
    ob2.a = ob2.a + ob2.c[i];
  }

  printf("%d", ob1.a + ob2.a);

  return 0;
}

1. 30
2. 60
3. 80
4. 120

= 1. ob1.c[i] = i
= 2. ob2.c[i] = i + i
= 3. ob1.a = ob1.a + ob1.c[i] = 0 + 2 + 4 + 6 + 8 = 20
= 4. ob2.a = ob2.a + ob2.c[i] = 0 + 4 + 8 + 12 + 16 = 40

IP Protocol 에서 사용되는 Field 와 해당 Field 에 대한 설명으로 틀린 것 (No.64 -> 2)
1. Header Length 에서 IP Protocol 의 Header 길이를 32 Bit Word 단위로 표시
2. Packet Length 는 IP Header 제외, Packet 전체 길이, 최대 크기는 2^32 - 1 Bit
3. Time To Live 는 송신 Host 가 Packet 을 전송하기 전 Network 에서 생존할 수 있는 시간을 지정한 것
4. Version Number 는 IP Protocol 의 Version 번호

= Total Packet Length (16 bits) 
  -> 1. IP Header 및 Data 를 포함한 IP Packet 전체 길이를 Bite 단위로 길이 표시
  -> 2. 최대 값 = 65,535 = 2^16 - 1

RIP Routing Protocol 에 대한 설명으로 틀린 것 (No.66 -> 2)
1. 경로 선택 Metric 은 Hop Count
2. Routing Protocol 을 IGP 와 EGP 로 분류, EGP 에 해당
3. 최단 경로 탐색에 Bellman-Ford Algorithm 사용
4. 각 Router 는 이웃 Router 들로부터 수신한 정보를 이용하여 Routing 표를 갱신

= 1. RIP (Routing Information Protocol)
  -> 1. 최단 경로 탐색, Bellman-Ford Algorithm 사용하는 "거리 벡터 Routing Algorithm"
  -> 2. Routing Protocol 을 IGP 와 EGP 로 분류했을 때, IGP 에 해당
  -> 3. 최단 경로 탐색 - Bellman-Ford Algorithm
  -> 4. 최적 경로 산출을 위한 정보, Hop (거리 값) 만 고려, RIP 를 선택한 경로가 최적 경로 X, 많이 발생 가능
  -> 5. 소규모 Network 환경 적합
  -> 6. 최대 Hop Count 를 15 Hop 이하로 한정

= 2. 자율 시스템 (AS: Autonomous System)
  -> 하나의 기관 내부, Router 들과 통신기기들의 집합, 하나의 학내망

= 3. IGP (Interior Gateway Protocol, 내부 Gateway Protocol)
  -> 학내망 내부에서 Routing 하는 것, 하나의 AS 내 Routing 에 사용되는 Protocol

= 4. EGP (Exterior Gateway Protocol, 외부 Gateway Protocol)
  -> 학내망, 다른 학내망 Routing 사용, AS 간 Routing 에 사용되는 Protocol

= 5. RIP 는 OSRF 와 함께 IGP (내부 Gateway Protocol) 에 해당

UDP Protocol 의 특징이 아닌 것 (No.69 -> 3)
1.비연결형 서비스 제공
2. 단순한 Header 구조, Overhead 적음
3. 주로 주소 지정, 경로 설정 기능
4. TCP 와 같이 Transport 계층에 존재

= 1. UDP (User Diagram Protocol)
  -> 1. 비연결형 및 비신뢰성 전송 서비스 제공
  -> 2. 흐름 제어, 순서 제어 없이 전송 속도 빠름
  -> 3. 수신된 Data 의 순서 재조정 기능 지원 X
  -> 4. 복구 기능 제공 X

= 2. 문항 3번은 IP Protocol 에 관한 설명

IP Protocol 의 주요 특징에 해당하지 않는 것 (No.75 -> 1)
1. Checksum 기능으로 Data Checksum 만 제공
2. Packet 분할, 병합하는 기능 수행
3. 비연결형 서비스 제공
4. Best Effort 원칙에 따른 전송 기능 제공

= Data Checksum 제공하지 않고, Header Checksum 만 제공

4개 Page 를 수용할 수 있는 주기억장치, 초기 모두 Empty, 다음 순서로 페이지 참조 발생, LRU Page 교체 알고리즘,
몇 번의 Page 결함이 발생 (No.76 -> 1)

페이지 참조 순서 -> 1, 2, 3, 1, 2, 4, 1, 2, 5

1. 5회
2. 6회
3. 7회
4. 8회

= 1. LRU (Least Recently USed) Algorithm
  -> 1. Page 참조 순서
     1   2   3   1   2   4   1   2   5
     결  결  결              결      결
     1   1   1   1   1   1   1   1   1
         2   2   2   2   2   2   2   2
             3   3   3   3   3   3   5
                         4   4   4   4

  -> 2. LRU Algorithm 은 가장 오랫동안 사용하지 않은 Page 교체
  -> 3. 결함 -> 주기억장치의 Page 가 변동되는 것 (이 문제에선 결함 5회 발생)

= 2. 오랫동안 사용하지 않은 Page
  1 = 1
  2 = 1 2
  3 = 1 2 3
  1 = 1 2 3
  2 = 1 2 3
  4 = 1 2 3 4
  1 = 1 2 3 4
  2 = 1 2 3 4
  5 = 2 3 4 5
 
  -> 제일 마지막 부분에 1이 지워질 게 아니라 가장 오래 사용되지 않는 3이 지워져야 함

사용자 수준에서 지원되는 Thread 가 Kernel Thread 에 비해 가지는 장점 (No.77 -> 4)
1. 한 Process 가 OS 호출 시, 전체 Process 가 대기할 필요 X, System 성능 증대 가능
2. 동시에 여러 Thread 의 Kernel 접근 가능, System 호출 동시 사용 가능
3. 각 Thread 를 개별적 관리 가능, Thread 의 독립적인 Scheduling 가능
4. Kernel Mode 로의 전환 없이 Thread 교환 가능, Overhead 감소

= 1. 1 ~ 3번 문항은 Kernel 수준 Thread 의 장점
= 2. 3번 문항은 사용자 수준에서 지원되는 Thread 도 가능 기능, 'Kernel 에서 지원되는 Thread' 가능
= 3. Kernel 에 비해 사용자 수준에서 지원되는 Thread 만의 장점이라고 보기 어려움 (3번 문항)

a[0] 의 주소값이 10, 다음 C언어 Program 실행 결과 (int 형 = 4 Byte) (No.79 -> 3)

#include <stdio.h>
int main(int argc, char *argv[]) {
  int a[] = {14, 22, 30, 38};
  printf("%u", &a[2]);
  printf("%u", a);
  return 0;
}

1. 14, 10
2. 14, 14
3. 18, 10
4. 18, 14

= 1. 14
  -> 1. 주소 값 => 10, 11, 12, 13
  -> 2. 자리 값 => a(0)

= 2. 22
  -> 1. 주소 값 => 14, 15, 16, 17
  -> 2. 자리 값 => a(1)

= 3. 30
  -> 1. 주소 값 => 18, 19, 20, 21
  -> 2. 자리 값 => a(2)

= 4. 38
  -> 1. 주소 값 => 22, 23, 24, 25
  -> 2. 자리 값 => a(3)

= 5. 첫 번째 printf -> a[2] 자리의 첫 번째 주소 값 (18)
= 6. 두 번째 printf -> a[0] 자리의 첫 번째 주소 값 (10)

Modularity 와 관련한 설명으로 틀린 것 (No.80 -> 2)
1. System 을 Module 로 분할, 각각 Module 로 만들고 수정 가능, 좋은 구조가 됨
2. 응집도는 Module 과 Module 사이의 상호의존 또는 연관 정도 의미
3. Module 간 결합도가 약해야 독립적인 Module 이 될 수 있음
4. Module 내 구성 요소들 간 응집도가 강해야 좋은 Module 설계

= 1. 응집도 -> 하나의 Module,  하나의 기능 수행 요소들, 연관성 척도, 응집도 강, 결합도 약 (독립적인 모듈 조건)
= 2. 결합도 -> Module 과 Module 사이 상호의존 또는 연관 정도
= 3. 응집도 -> Module 이 독립적인 기능으로 정의되어 있는 정도
