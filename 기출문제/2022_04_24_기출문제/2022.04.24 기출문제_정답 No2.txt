통합 테스트 (Integration Test) 와 관련된 설명으로 틀린 것 (No.21 -> 3)
1. 시스템을 구성하는 모듈의 인터페이스와 결합을 Test
2. 하향식 통합 테스트의 경우, 넓이 우선 (Breadth First) 방식으로 테스트를 할 모듈을 선택 가능
3. 상향식 통합 테스트의 경우 시스템 구조의 최상위에 있는 모듈을 먼저 구현하고 Test
4. 모듈 간 인터페이스, 시스템 동작이 정상 작동 여부 확인을 위해선 상향식 보다 하향식 통합 테스트 사용 추천

= 1. 상향식 통합 테스트
  -> 1. Program 하위 모듈에서 상위 모듈 방향으로 통합
  -> 2. 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 Cluster 필요

= 2. 하향식 통합 테스트
  -> 1. 상위 모듈에서 하위 모듈 방향으로 통합
  -> 2. 깊이 우선 통합법, 넓이 우선 통합법 사용
  -> 3. 초기부터 사용자에게 시스템 구조를 보여줌

SW 개발과정에서 SW 변경사항을 관리하기 위해 개발된 일련의 활동을 뜻하는 것 (No.24 -> 2)
1. 복호화
2. 형상관리
3. 저작권
4. 크랙

= 1. 복호화 -> Decoding, 부호화 된 Data 를 부호화 되기 전 형태 변환, 사람이 읽을 수 있는 형태로 되돌려 놓는 것
= 2. 저작권 -> 창작물을 만든이가 자기 저작물에 대해 가지는 법적권리
= 3. 크랙 -> SW 수정, SW 를 크랙하는 사람이 원함 X, 보통은 수정 방식 (복사 보호, SW 조작 보호) 비활성화, 제거

TC 와 관련된 설명으로 틀린 것 (No.25 -> 1)
1. Test 목표 및 Test 방법을 결정하기 전, TC 를 작성해야 함
2. 프로그램에 결함 있더라도 입력에 대해 정상적인 결과를 낼 수 있기 때문에 결함 검사할 수 있는 TC 찾는 것이 중요
3. 개발된 서비스가 정의된 요구 사항 준수 여부 확인, 입력 값과 실행 조건, 예상 결과의 집합
4. TC 실행이 통과, 실패 여부 확인 및 판단을 위한 기준 -> Test Oracle

= TC 
  -> 1. 구현된 SW 의 사용자 요구사항 정확 준수 여부 확인
  -> 2. 설계된 입력 값, 실행 조건, 기대 결과 등으로 구성된 Test 항목에 대한 명세서
  -> 3. Test 목표, 방법 결정한 후, TC 작성해야 함

객체지향 개념을 활용한 SW 구현과 관련된 설명 중 틀린 것 (No.26 -> 2)
1. 객체 (Object )란 필요한 자료 구조, 수행되는 함수들을 가진 하나의 독립된 존재
2. JAVA 에서 정보 은닉 (Information Hiding) 을 표기 시, private 의미는 '공개'
3. 상속 (Inheritance) 은 개별 Class 를 상속 관계로 묶음, Class 간 체계화 된 전체 구조 파악 용이
4. 같은 Class 에 속하는 개개의 객체, 하나의 Class 에서 생성된 객체를 Instance 라고 함

= JAVA 정보 은식 (InformationHiding) 표기 시, private 의미 -> 외부에서 Class 내부 정보 접근 차단, '접근 금지'

DRM (Digital Rights Management) 과 관련된 설명으로 틀린 것 (No.27 -> 4)
1. Digital 콘텐츠, Device 사용 제한, HW 제조업자, 저작권자,출판업자 등이 사용 가능한 접근 제어 기술
2. Digital 미디어 생명 주기 동안 발생하는 사용 권한 관리, 과금, 유통 단계 관리 기술
3. 클리어링 하우스 (Clearing House), 사용자에게 Contents 라이선스 발급, 권한 부여 System
4. 원본 안전 유통, 전자적 보안 고려 X, 불법 유통, 복제 방지 불가능

= 1. Digital 콘텐츠 지적재산권 보호, 관리 기능, 안전한 유통, 배포 보장 Solution
= 2. 권한 통제기술, 사용권한제어 기술, 패키징 기술, 라이선스 관리 포함한 유통 체계
= 3. Digital 콘텐츠, Device 사용 제한, HW 제조업자, 저작권자, 출판업자 등이 사용 가능한 접근 제어 기술

위험 모니터링 의미 (No.28 -> 4)
1. 위험 이해
2. 첫 번째 조치로 위험 피할 수 있도록 하는 것
3. 위험 발생 후 즉치 조치
4. 위험 요소 징후들에 대하여 계속적으로 인지하는 것

알고리즘과 관련된 설명으로 틀린 것 (No.31 -> 4)
1. 주어진 작업 수행하는 컴퓨터 명령어 순서대로 나열한 것
2. 검색 (Searching) 은 무정렬 데이터, 정렬 완료 데이터 중, 키 값에 해당하는 데이터를 찾는 알고리즘
3. 정렬 (Sorting) 은 흩어져 있는 Data 를 키 값을 이용하여 순서대로 열가하는 알고리즘
4. 선형 검색은 검색 수행 전, 반드시 데이터 집합 정렬되어야 함

= 1. 선형 검색 -> 처음부터 끝까지 하나씩 순서대로 비교하며 원하는 값을 찾아내는 검색
= 2. 이진 검색 -> 검색 수행 전, 반드시 Data 집합 정렬되어야 함

다음은 Insepction 과정 표현한 것. (가) ~ (마) 에 들어갈 말을 보기에서 찾아 바르게 연결한 것 (No.33 -> 2)

계획 -> (가) -> (나) -> (다) -> (라) -> (마)
(라) -> 계획

ㄱ 준비  ㄴ 사전 교육  ㄷ 인스펙션 회의  ㄹ 수정  ㅁ 후속조치

1. (가) - ㄴ, (나) - ㄷ
2. (나) - ㄱ, (다) - ㄷ
3. (다) - ㄷ, (라) - ㅁ
4. (라) - ㄹ, (마) - ㄷ

= 1. 가 - 사전 교육
= 2. 나 - 준비
= 3. 다 - Inspection 회의
= 4. 라 - 수정
= 5. 마 - 후속 조치

SW 를 보다 쉽게 이해, 적은 비용으로 수정 가능, 겉으로 보이는 동작의 변화 없이 내부구조 변경 (No.34 -> 1)
1. Refactoring
2. Architecting
3. Specification
4. Renewal

= 1. Refactoring -> Code 구조 재조정
= 2. Architecting -> 설계 관련
= 3. Specification -> audtptj
= 4. Renewal -> 유지 보수
= 5. Refactoring 과 유지보수는 다른 개념

단위 테스트 (Unit Test) 와 관련된 설명으로 틀린 것 (No.35 -> 3)
1. 구현 단계에서 각 모듈 개발 완료 후, 개발자가 명세서 내용대로 정확 구현 여부 Test
2. 모듈 내부 구조를 구체적으로 볼 수 있는 구조적 Test 주로 시행
3. 필요 데이터 인자 통해 넘겨주고, Test 완료 후 그 결과값을 받는 역할하는 가상 모듈 -> Test Stub
4. Test 할 모듈을 호출하는 모듈 있고, Test 할 모듈이 호출하는 모듈 있음

= 1. Test Driver -> 필요 데이터를 통해 인자 넘겨주고, 테스트 완료 후, 그 결과 값을 받는 역할을 하는 가상 모듈
= 2. Test Stub -> 인자를 통해 받은 값을 가지고 수행, 그 결과를 Test 할 모듈에 넘겨주는 역할

아래 Tree 구조에 대하여 후위 순위 (Postorder) 한 결과 (No.37 -> 2)
     a
  b    c
d   e   f
 g   h

1. a - b - d - c - e - g - h - f
2. d - b - g - h - e - f - c - a
3. d - b - a - g - e - h - c - f
4. a - b - d - g - e - h - c - f

= 1. 전위 운행 (PreOrder) -> Root, Left, Right 순서
= 2. 중위 운행 (InOrder) -> Left, Root, Right 순서
= 3. 후위 운행 (PostOrder) -> Left, Right, Root 순서

= 4. pre_order (전위 순회) -> 뿌리 먼저 방문
= 5. in_order (중위 순회) -> 왼쪽 하위 노드 방문 후, 뿌리 방문
= 6. post_order (후위 순회) -> 하위 노드 모두 방문 후, 뿌리 방문

Interface 구현 시, 사용 기술 속성-값 쌍 (Attribute-Value Pairs), Data Object 전달, 개방형 표준 포맷 (No.38 -> 1)

1. JSON
2. HTML
3. AVPN
4. DOF

= JSON (JavaScript Object Notation)
  -> 1. 속성-값 쌍 (Attribute-Value Pairs) Data Object 전달, 개방형 표준 포멧
    -> 2. AJAX (Asynchronous Javascript and XML) 에서 많이 사용, XML 을 대체하는 주요 Data Format
    -> 3. 언어 독립형 Data Format, 다양한 프로그래밍 언어에서 사용되고 있음

순서 있는 List, Data 삽입 (Push), 삭제 (Pop) 가 한 쪽 끝, LIFO (Last In First Out) 자료 구조 (No.39 -> 3)
1. Tree
2. Graph
3. Stack
4. Queue

= 1. Stack => LIFO, 한 쪽 끝에서 일어남
= 2. Queue => FIFO, 양방향에서 일어남
= 3. Tree & Graph 는 비선형 구조

다음 중 Unit Test 도구로 사용될 수 없는 것 (No.40 -> 4)
1. CppUnit
2. JUnit
3. HttpUnit
4. IgpUnit

= 1. CppUnit -> C++ 프로그래밍 언어용 Unit Test 도구
= 2. JUnit -> Java 프로그래밍 언어용 Unit Test 도구
= 3. HttpUnit -> Web Browser 없이 Web Site 수행, 오픈 소스 SW Test Framework
= 4. IgpUnit -> 존재하지 않는 Unit
