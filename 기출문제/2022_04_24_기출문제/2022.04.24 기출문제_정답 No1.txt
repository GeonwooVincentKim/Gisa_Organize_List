UML Diagram 중, 순차 Diagram 에 대한 설명으로 틀린 것 (No.1 -> 2)
1. 객체 간 동적 상호작용을 시간 개념을 중심으로 모델링 하는 것
2. 주로 시스템의 정적 측면을 Modeling 하기 위해 사용
3. 일반적으로 Diagram 의 수직 방향이 시간의 흐름을 나타냄
4. 회귀 메시지 (Self-Message), 제어 블록 (Statement Block) 등으로 구성

= 순차 Diagram 은 행위 Diagram 이므로 동적, 순차적인 표현을 위한 Diagram

Message 지향 미들웨어 (Message-Oriented Middleware, MOM) 에 대한 설명으로 틀린 것 (No.2 -> 1)
1. 느리고 안정적인 응답보다 즉각적인 응답이 필요한 온라인 업무에 적합
2. 독립적인 Application 을 하나의 통합된 System 으로 묶기 위한 역할
3. 송신 측과 수신 측의 연결 시 Message Queue 를 활용하는 방법
4. 상이한 Application 간 통신을 비동기 방식으로 지원

= 1. MOM (Message Oriented Middleware)
  -> 1. Message 기반의 비동기형 Message 를 전달하는 방식의 Middleware
  -> 2. Online 업무보다 이기종 분산 데이터 시스템의 데이터 동기를 위해 많이 사용

= 2. MOM (Message Oriented Middleware) 은 즉각적인 응답을 원하는 경우가 아님
= 3. 다소 느리고 안정적인 응답을 필요로 하는 경우에 많이 사용

요구사항 분석에서 비기능적 (Nonfunctional) 요구에 대한 설명으로 옳은 것 (No.5 -> 2)
1. 시스템의 처리량 (Throughput), 반응 시간 등 성능 요구, 품질 요구는 비기능적 요구에 해당하지 않음
2. '차량 대여 시스템이 제공하는 모든 화면이 3초 이내에 사용자에게 보여야 함' 는 비기능적 요구
3. 시스템 구축과 관련된 안전, 보안에 대한 요구사항들은 비기능적 요구에 해당하지 않음
4. '금융 시스템은 조회, 인출, 입금, 송금의 기능이 있어야 한다' 는 비기능적 요구

= 기능적 요구사항 vs 비기능적 요구사항
  - 1. 기능적 요구사항 -> 시스템이 실제로 어떻게 동작하는지에 관점을 둔 요구사항
  - 2. 비기능적 요구사항 -> 시스템 구축에 대한 성능, 보안, 품질, 안정성 등으로 실제 수행에 보조적인 요구사항
  - 3. '차량대여 시스템이 제공하는 모든 화면이 3초 이내에 사용자에게 보여야 함' 는 성능 해당, 비기능적 요구사항

정보공학 방법론에서 DB 설계의 표현으로 사용하는 Modeling 언어 (No.6 -> 4)
1. Package Diagram
2. State Transition Diagram
3. Deployment Diagram
4. Entity-Relationship Diagram

= 1 ~	3 -> UML Diagram, 4 -> 정보공학 방법론 (DB 설계)

UI 의 설계 지침으로 틀린 것 (No.8 -> 3)
1. 이해하기 편하고 쉽게 사용할 수 있는 환경 제공
2. 주요 기능을 메인 화면에 노출하여 조작이 쉽도록 해야 함
3. 치명적인 오류에 대한 부정적인 사람은 사용자가 인지할 수 없도록 해야 함
4. 사용자의 직무, 연령, 성별 등 다양한 계층을 수용해야 함

= 1. 사용자 중심
  -> 1. 사용자 이해하기 쉽고 편하게 사용할 수 있는 환경 제공
  -> 2. 실 사용자에 대한 이해가 바탕이 되어야 함

= 2. 일관성 -> 버튼이나 조작 방법을 사용자가 기억하기 빠르고 쉽게 습득할 수 있도록 설계해야 함
= 3. 단순성 -> 조작 방법은 가장 간단하게 작동되도록 하여 인지적 부담 최소화
= 4. 결과 예측 가능 -> 작동시킬 기능만 보고도 결과 예측이 가능해야 함
= 5. 가시성 -> 주요 기능을 메인 화면에 노출, 쉬운 조작 가능해야 함
= 6. 표준화 -> 디자인을 표준화, 기능구조 의 선행 학습 이후 쉽게 사용 가능해야 함
= 7. 접근성 -> 사용자 직무, 연령, 성별 등이 고려된 다양한 계층을 수용해야 함
= 8. 명확성 -> 사용자가 개념적으로 쉽게 인지해야 함
= 9. 오류 발생 해결 -> 사용자가 오류에 대한 상황을 정확하게 인지할 수 있어야 함

SW 개발 영역을 결정하는 요소 중, 다음 사항과 관계있는 것 (No.10 -> 4)
1. 기능 (Function)
2. 성능 (Performance)
3. 제약 조건 (Constraint)
4. 인터페이스 (Interface)

= Interface -> 서로 다른 두 System 이나 SW 등을 서로 이어주는 부분 또는 접속 장치를 의미

객체애 대한 설명으로 틀린 것 (No.11 -> 2)
1. 객체는 상태, 동작, 고유 식별자를 가진 모든 것이라 할 수 있음
2. 객체는 공통 속성을 공유하는 Class 들의 집합
3. 객체는 필요한 자료 구조와 이에 수행되는 함수들을 가진 하나의 독립된 존재
4. 객체의 상태는 속성 값에 의해 정의

= Class 는 공통 속성을 공유하는 객체들의 집합

속성과 관련된 연산 (Operation) 을 Class 안에 묶어서 하나로 취급하는 것을 의미하는 객체지향 개념 (No.12 -> 3)
1. Inheritance
2. Class
3. Encapsulation
4. Association

Agile Process Model 에 대한 설명으로 틀린 것 (No.13 -> 1)
1. 변화에 대한 대응보다는 자세한 계획을 중심으로 SW 를 개발
2. Process 와 도구 중심이 아닌 개개인과의 상호소통을 통해 의견 수렴
3. 협상과 계약보다는 고객과의 협력을 중시
4. 문서 중심이 아닌, 실행 가능한 SW 를 중시

= 1. 애자일 개발 프로세스 -> 개발에 대한 개념적 방법론, 개발 Project 기간을 짧은 주기로 나눠 반복 개발 하는 것
= 2. 고객관점의 효율적, 민첩한 변화 대응을 중시
= 3. 애자일 선언문
  -> 1. 프로세스, 도구보다는 (사람과 상호작용), 광범위한 문서보다는 (실제 작동하는 제품)
  -> 2. 계약 협상보다는 (고객 협력), 계획을 따르기 보다는 (변화 대응)

명백한 역할을 가지고 독립적으로 존재할 수 있는 System 의 부분, 넓은 의미 재사용되는 모든 단위,
Interface 를 통해 접근 가능 (No.14 -> 3)

1. Model
2. Sheet
3. Component
4. Cell

= Component -> 프로그래밍에 있어 재사용 가능, 각각의 독립된 모듈, 특정 기능 수행을 위해 독립적으로 분리

UI 와 관련된 기본 개념 중 하나, 시스템 상태, 사용자 지시 효과, 사용자가 명령에 대한 진행상황,
표시된 내용을 해석할 수 있도록 도와주는 것 (No.16 -> 1)

1. Feedback
2. Posture
3. Module
4. Hash

= Feedback -> 처리된 결과 측정, 목표 도달되었는가를 검사, 불충분할 경우 다시 입력하는 요소로 사용

SW Modeling 과 관련된 설명으로 틀린 것 (No.18 -> 1)
1. Modeling 작업의 결과물은 다른 Modeling 작업에 영향 줄 수 없음
2. 구조적 방법론, DFD (Data Flow Diagram), DD (Data Dictionary) 등 사용, 요구사항 결과 표현
3. 객체지향 방법론에선 UML 표기법 사용
4. SW Model 사용 시, 개발될 SW 에 대한 이해도 및 이해 당사자 간 의사소통 향상에 도움

= 1. Modeling 작업 결과물은 다른 Modeling 작업에 영향 줄 수 있음
= 2. Use Case 명세로부터 필요한 요소들을 가져와 Domain Model 로 정리 가능
