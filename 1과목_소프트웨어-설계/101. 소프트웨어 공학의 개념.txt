I. 소프트웨어 공학의 개념
1. 소프트웨어
- 1. 소프트웨어의 개념
  = 1. 컴퓨터 동작, 처리 순서 및 방법 지시하는 명령어의 집합인 프로그램, 절차, 규칙, 관련 문서 등을 총칭
  = 2. 프로그램 -> 일련의 작업 처리, 명령어, 데이터의 집합
  = 3. 자료 구조 (Data Structure) -> 컴퓨터 기억장치, 자료표현, 처리, 저장 방법, 데이터 논리적관계, 처리 알고리즘
  = 4. 문서 -> 소프트웨어 개발, 사용자 설명서, 소프트웨어 요구 분석서, 평가서, 명세서, 프로젝트 & 검사 계획서

- 2. 소프트웨어의 특징
  = 1. 상품성 -> 소프트웨어 상품 판매
  = 2. 복잡성 -> 개발 과정 복잡, 관리 어려움
  = 3. 변경 가능성 -> 프로그램 일부 수정, 업그레이드 및 오류 수정
  = 4. 복제성 -> 복제 용이, 복사, 유통 가능

- 3. 시스템의 개요와 기본 요소
  = 1. 시스템의 개요
    -> 1. 처리 가능한 자료 입력, 저장, 처리 가공해 출력, 설계/구현된 정보 체계
    -> 2. 하나의 목적, 다양한 요소가 유기적으로 결합

  = 2. 기본 요소 -> 입출력, 처리, 제어, 피드백 => 입력 (왼) -> 처리 (가운) <- 제어 (위) -> 출력 (오) -> 피드백 (아)

** 3초 컷
시스템의 기본 요소
1. 입력 (처리 방법, 제어 조건, 처리할 데이터)
2. 출력 (처리된 결과를 시스템에서 출력)
3. 처리 (입력된 자료를 처리 조건에 따라 변환, 가공)
4. 제어 (시스템 기본 요소, 과정 올바르게 수행 여부 감독)
5. 피드백 (처리된 결과 측정, 파악)
**

** 3초 컷 
소프트웨어 위기
1. 개발 속도 느림, 사용자들의 요구사항 감당할 수 없는 문제 발생
2. 원인 -> 하드웨어 비용 초과, 개발 기간 지연, 인력 부족 & 인건비 상승, 성능 & 신뢰부족, 유지보수 어려움
**

2. 소프트웨어 공학 (S/W Engineering)
- 1. 소프트웨어 공학 (S/W Engineering)
  = 1. 신뢰도 높은 S/W 만들기 위한 방법, 도구와 절차들의 체계
  = 2. IEEE (전기전자학회), S/W 개발, 운용, 유지보수 및 파기 -> 체계적인 접근 방법 정의

- 2. S/W 공학 기본 원칙
  = 1. 현대적 프로그래밍 기술 적용
  = 2. 높은 신뢰성, 편리한 사용, 편한 유지보수
  = 3. 지속적 검증 시행, 결과 명확한 기록
  = 4. 사용자 원하는 대로 동작, 시스템 안정성 & 보안 확보
  = 5. S/W 개발 비용 최소화, 최신 프로그램 언어, 최신 알고리즘 사용 현황 확인
  = 6. 개발 단계, 소스 코드 문서화, 명확성 유지

- 3. 공학적으로 좋은 S/W 조건
  = 1. 신뢰성 높고, 효율적, 사용자 의도대로 동작
  = 2. 편리성 제공, 잠재적 에러 최소화, 유지보수성 용이

- 4. S/W 공학 계층 구조
  = 1. 도구 -> 프로세스 & 방법 처리
  = 2. 방법론 -> S/W 설계, 기술적 방법
  = 3. 프로세스 -> S/W 기초, 개발 방법론, 도구 적용

- 5. S/W 품질 -> 사용자 요구, 유지보수 용이, 에러 최소화, 비용 유지, 정확 결과 도출, 원하는 시간 & 원하는 기능
- 6. S/W 공학의 목표
  = 1. 최소 비용, 단기간, 시스템 적합한 S/W 개발
  = 2. S/W 제품 품질 향상, S/W 생산성, 작업 만족도 증대
  = 3. 신뢰성 있는 프로젝트, 경제적 비용, 공학적 원리 정립

** 3초 컷 -> S/W 공학의 궁극적 목표 -> 최소의 비용으로 계획된 일정보다 빠른 시일 내 개발
